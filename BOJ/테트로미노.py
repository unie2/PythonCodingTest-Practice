n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]
max_value = 0

# 테트로미노 좌표 정보 (기준점은 가장 왼쪽 + 위쪽에 위치한 정사각형)
case = [
    # case 1 (ㅡ, ㅣ)
    [[0, 0], [0, 1], [0, 2], [0, 3]],
    [[0, 0], [1, 0], [2, 0], [3, 0]],
    # case 2 (ㅁ)
    [[0, 0], [0, 1], [1, 0], [1, 1]],
    # case 3 (ㄴ 회전 및 대칭)
    [[0, 0], [1, 0], [2, 0], [2, 1]],
    [[0, 0], [1, 0], [0, 1], [0, 2]],
    [[0, 0], [0, 1], [1, 1], [2, 1]],
    [[0, 0], [0, 1], [0, 2], [-1, 2]],
    [[0, 0], [0, 1], [-1, 1], [-2, 1]],
    [[0, 0], [1, 0], [1, 1], [1, 2]],
    [[0, 0], [0, 1], [1, 0], [2, 0]],
    [[0, 0], [0, 1], [0, 2], [1, 2]],
    # case 4 (회전 및 대칭)
    [[0, 0], [1, 0], [1, 1], [2, 1]],
    [[0, 0], [0, 1], [-1, 1], [-1, 2]],
    [[0, 0], [0, 1], [-1, 1], [1, 0]],
    [[0, 0], [0, 1], [1, 1], [1, 2]],
    # case 5 (ㅜ, ㅓ, ㅗ, ㅏ)
    [[0, 0], [0, 1], [0, 2], [1, 1]],
    [[0, 0], [-1, 1], [0, 1], [1, 1]],
    [[0, 0], [0, 1], [0, 2], [-1, 1]],
    [[0, 0], [1, 0], [2, 0], [1, 1]]
]

def tetromino(i, j) :
    for x in range(19) :
        sum_value = 0
        for y in range(4) :
            try :
                sum_value += board[i + case[x][y][0]][j + case[x][y][1]]
            except :
                break
        check(sum_value)

def check(sum_value) :
    global max_value
    max_value = max(max_value, sum_value)

for i in range(n) :
    for j in range(m) :
        tetromino(i, j)

print(max_value)

'''
1. 5가지 테트로미노의 각 회전 및 대칭 모양을 3차원 배열 형태로 case에 정의한다.
2. 각 자리를 기준으로 tetromino() 함수를 호출하여 테트로미노가 놓인 칸에 쓰인 수들의 합을 구한다.
3. check() 함수를 호출하여 더 큰 값을 max_value에 갱신하고, tetromino() 함수의 작업이 모두 끝나면 최종적으로 max_value 값을 출력한다.

'''
